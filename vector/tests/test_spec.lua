
local vPath = debug.getinfo(1).source:match("@?(.*/)")
vPath = string.gsub(vPath, "/tests", "") .. "vector"
local vector = require(vPath)

describe('Vector', function()
    it('should create a new vector', function()
        local v = vector.new(1, 2, 3)
        assert.are.same(1, v.x)
        assert.are.same(2, v.y)
        assert.are.same(3, v.z)
    end)
    it('should add two vectors', function()
        local v1 = vector.new(1, 2, 3)
        local v2 = vector.new(4, 5, 6)
        local v3 = v1:add(v2)
        assert.are.same(5, v3.x)
        assert.are.same(7, v3.y)
        assert.are.same(9, v3.z)
    end)
    it('The vector should be printable', function()
        local v1 = vector.new(1, 2, 3)
        assert.are.same("v=1,2,3", "v="..tostring(v1))
    end)
    it('should subtract two vectors', function()
        local v1 = vector.new(1, 2, 3)
        local v2 = vector.new(4, 5, 6)
        local v3 = v1:sub(v2)
        assert.are.same(-3, v3.x)
        assert.are.same(-3, v3.y)
        assert.are.same(-3, v3.z)
    end)
    it('should multiply a vector by a value', function()
        local v1 = vector.new(1, 2, 3)
        local v2 = v1:mul(2)
        assert.are.same(2, v2.x)
        assert.are.same(4, v2.y)
        assert.are.same(6, v2.z)
    end)
    it('should divide a vector by a value', function()
        local v1 = vector.new(1, 2, 3)
        local v2 = v1:div(2)
        assert.are.same(0.5, v2.x)
        assert.are.same(1, v2.y)
        assert.are.same(1.5, v2.z)
    end)
    it('should negate a vector', function()
        local v1 = vector.new(1, 2, 3)
        local v2 = -v1
        assert.are.same(-1, v2.x)
        assert.are.same(-2, v2.y)
        assert.are.same(-3, v2.z)
    end)
    it('should compare two vectors', function()
        local v1 = vector.new(1, 2, 3)
        local v2 = vector.new(1, 2, 3)
        assert.is_true(v1 == v2)
        assert.is_false(v1 ~= v2)
    end)
    it('should compare two vectors', function()
        local v1 = vector.new(1, 2, 3)
        local v2 = vector.new(4, 5, 6)
        assert.is_false(v1 == v2)
        assert.is_true(v1 ~= v2)
    end)
    it('should get the dot product of two vectors', function()
        local v1 = vector.new(1, 2, 3)
        local v2 = vector.new(4, 5, 6)
        assert.are.same(32, v1:dot(v2))
    end)
    it('should get the dot product of two vectors', function()
        local v1 = vector.new(1, 2, 3)
        local v2 = vector.new(4, 5, -6)
        assert.are.same(-4, v1:dot(v2))
    end)
    it('should get the cross product of two vectors', function()
        local v1 = vector.new(1, 2, 3)
        local v2 = vector.new(4, 5, 6)
        assert.are.same("v=-3,6,-3", "v="..tostring(v1:cross(v2)))
    end)
    it('should get the cross product of two vectors', function()
        local v1 = vector.new(1, 2, 3)
        local v2 = vector.new(4, 5, -6)
        assert.are.same("v=-27,18,-3", "v="..tostring(v1:cross(v2)))
    end)
    it('should round a vector', function()
        local v1 = vector.new(1, 2.1, 3.78)
        assert.are.same("v=1,2,4" ,"v="..tostring(v1:round(0.5)))
    end)
    it('should normalize a vector', function()
        local v1 = vector.new(3, 3, 3)
        assert.are.same("v=0.58,0.58,0.58", "v="..tostring(v1:norm():round(0.01)))
    end)
    it('should normalize a vector', function()
        local v1 = vector.new(4, 5, -6)
        assert.are.same("v=0.46,0.57,-0.68", "v="..tostring(v1:norm():round(0.01)))
    end)
    it('should transform a vector to the right', function()
        local v1 = vector.new(1, 0, 0)
        local v2 = v1:transformRight()
        assert.are.same("v=-0,0,1", "v="..tostring(v2))
        local v3 = v2:transformRight()
        assert.are.same("v=-1,0,-0", "v="..tostring(v3))
        local v4 = v3:transformRight()
        assert.are.same("v=0,0,-1", "v="..tostring(v4))
    end)
    it('should transform a vector to the left', function()
        local v1 = vector.new(1, 0, 0)
        local v2 = v1:transformLeft()
        assert.are.same("v=0,0,-1", "v="..tostring(v2))
        local v3 = v2:transformLeft()
        assert.are.same("v=-1,0,-0", "v="..tostring(v3))
        local v4 = v3:transformLeft()
        assert.are.same("v=-0,0,1", "v="..tostring(v4))
    end)
end)